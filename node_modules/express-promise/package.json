{
  "_args": [
    [
      "express-promise",
      "E:\\bla\\messengerSWClient"
    ]
  ],
  "_from": "express-promise@*",
  "_id": "express-promise@0.4.0",
  "_inCache": true,
  "_location": "/express-promise",
  "_npmUser": {
    "email": "i@zihua.li",
    "name": "luin"
  },
  "_npmVersion": "2.0.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "express-promise",
    "raw": "express-promise",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/express-promise/-/express-promise-0.4.0.tgz",
  "_shasum": "043c3cb7788d0ff299b06506df445722fdfad1e4",
  "_shrinkwrap": null,
  "_spec": "express-promise",
  "_where": "E:\\bla\\messengerSWClient",
  "bugs": {
    "url": "https://github.com/luin/express-promise/issues"
  },
  "dependencies": {},
  "description": "An [express.js](http://expressjs.com) middleware for easy rendering async query.",
  "devDependencies": {
    "dotq": "~0.1.0",
    "mocha": "~1.12.1",
    "should": "~1.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "043c3cb7788d0ff299b06506df445722fdfad1e4",
    "tarball": "http://registry.npmjs.org/express-promise/-/express-promise-0.4.0.tgz"
  },
  "engines": [
    "node >=0.6.0"
  ],
  "gitHead": "161a984aa36c7b2edbb2cf09b04182e2e17fff4d",
  "homepage": "https://github.com/luin/express-promise",
  "installable": true,
  "keywords": [
    "express",
    "middleware",
    "promise"
  ],
  "licenses": "MIT",
  "main": "./",
  "maintainers": [
    {
      "name": "luin",
      "email": "i@zihua.li"
    }
  ],
  "name": "express-promise",
  "optionalDependencies": {},
  "readme": "# express-promise\nAn [express.js](http://expressjs.com) middleware for easy rendering async query.\n\n[![Build Status](https://travis-ci.org/luin/express-promise.png?branch=master)](https://travis-ci.org/luin/express-promise)\n\n## Cases\n### 1. previously\n\n    app.get('/users/:userId', function(req, res) {\n        User.find(req.params.userId).then(function(user) {\n            Project.getMemo(req.params.userId).then(function(memo) {\n                res.json({\n                    user: user,\n                    memo: memo\n                });\n            });\n        });\n    });\n\n### 1. now\n\n    app.get('/users/:userId', function(req, res) {\n        res.json({\n            user: User.find(req.params.userId),\n            memo: Project.getMemo(req.params.userId)\n        });\n    });\n\n### 2. previously\n\n    app.get('/project/:projectId', function(req, res) {\n        var field = req.query.fields.split(';');\n        var result = {};\n\n        var pending = 0;\n        if (field.indexOf('people') !== -1) {\n            pending++;\n            Project.getField(req.params.projectId).then(function(result) {\n                result.people = result;\n                if (--pending) {\n                    output();\n                }\n            });\n        }\n\n        if (field.indexOf('tasks') !== -1) {\n            pending++;\n            Project.getTaskCount(req.params.projectId).then(function(result) {\n                result.tasksCount= result;\n                if (--pending) {\n                    output();\n                }\n            });\n        }\n\n        function output() {\n            res.json(result);\n        }\n    });\n\n### 2. now\n    app.get('/project/:projectId', function(req, res) {\n        var field = req.query.fields.split(';');\n        var result = {};\n\n        if (field.indexOf('people') !== -1) {\n            result.people = Project.getField(req.params.projectId);\n        }\n\n        if (field.indexOf('tasks') !== -1) {\n            result.tasksCount = Project.getTaskCount(req.params.projectId);\n        }\n\n        res.json(result);\n    });\n\n## Install\n    $ npm install express-promise\n\n## Usage\nJust `app.use` it!\n\n    app.use(require('express-promise')());\n\nThis library supports the following methods: `res.send`, `res.json`, `res.render`.\n\nIf you want to let express-promise support nodejs-style callbacks, you can use [dotQ](https://github.com/luin/dotQ) to convert the nodejs-style callbacks to Promises. For example:\n\n    require('dotq');\n    app.use(require('express-promise')());\n\n    var fs = require('fs');\n    app.get('/file', function(req, res) {\n        res.send(fs.readFile.promise(__dirname + '/package.json', 'utf-8'));\n    });\n\n### Skip traverse\n\nAs a gesture to performance, when traverse an object, we call `toJSON` on it to reduce the properties we need to traverse recursively. However that's measure has some negative effects. For instance, all the methods will be removed from the object so you can't use them in the template.\n\nIf you want to skip calling `toJSON` on an object(as well as stop traverse it recursively), you can use the `skipTraverse` option. If the function return `true`, express-promise will skip the object.\n\n    app.use(require('express-promise')({\n      skipTraverse: function(object) {\n        if (object.hasOwnProperty('method')) {\n          return true;\n        }\n      }\n    }))\n\n## Libraries\nexpress-promise works well with some ODM/ORM libraries such as [Mongoose](http://mongoosejs.com) and [Sequelize](http://sequelizejs.com). There are some examples in the /examples folder.\n\n### Mongoose\nWhen query a document without passing a callback function, Mongoose will return a [Query](http://mongoosejs.com/docs/queries.html) instance. For example:\n\n    var Person = mongoose.model('Person', yourSchema);\n    var query = Person.findOne({ 'name.last': 'Ghost' }, 'name occupation');\n\nQuery has a `exec` method, when you call `query.exec(function(err, result) {})`, the query will execute and the result will return to the callback function. In some aspects, Query is like Promise, so express-promise supports Query as well. You can do this:\n\n    exports.index = function(req, res){\n      res.render('index', {\n        title: 'Express',\n        cat: Cat.findOne({name: 'Zildjian'})\n      });\n    };\n\nand in the index.jade, you can use `cat` directly:\n\n    p The name of the cat is #{cat.name}\n\n### Sequelize\nSequelize supports Promise after version 1.7.0 :)\n\n## Articles and Recipes\n* [Node Roundup: Bedecked, Knockout.sync.js, express-promise](http://dailyjs.com/2013/09/18/node-roundup/)\n* [减少异步嵌套，Express-promise](http://zihua.li/2013/09/express-promise/) [Chinese]\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2013 Zihua Li\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/luin/express-promise/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/luin/express-promise.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "0.4.0"
}
